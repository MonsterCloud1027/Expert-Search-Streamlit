import streamlit as st
import pandas as pd
import os
import plotly.express as px
import plotly.io as pio
import networkx as nx
import plotly.graph_objects as go
pio.templates.default = "simple_white"  # 其它可选 'plotly', 'ggplot2', 'seaborn', 'simple_white'


# 预设选项
field_to_csv = {
    "Information Retrieval": "./results/IR.csv",
    "Artificial Intelligence": "./results/AI.csv",
    "Machine Learning": "./results/ML.csv",
    "Natural Language Processing": "./results/NLP.csv",
    "Computer Vision": "./results/CV.csv",
}

st.logo("img/UoG_colour.png")
# 标志 + 标题

# 居中 logo + 标题
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.image("img/UoG_colour.png", width=300)
    st.title("Expert Search")

st.markdown("</div>", unsafe_allow_html=True)
st.caption("I want to find a PhD supervisor in...")

# 页面标题



# 搜索行（搜索框 + 搜索按钮）
col1, col2 = st.columns([ 4, 1])  # 搜索框占3份宽度，按钮占1份
with col1:
    
    selected_field = st.selectbox("I want to find a PhD supervisor in...", list(field_to_csv.keys()),label_visibility="collapsed")
with col2:
    
    search_clicked = st.button("Search")

# 搜索按钮
# 点击搜索后
db = pd.read_csv('./data/staff_paper_data.csv')
# 点击搜索后加载并展示专家卡片
if search_clicked:
    csv_file = field_to_csv[selected_field]

    if os.path.exists(csv_file):
        df = pd.read_csv(csv_file)

        if not df.empty:
            st.subheader(f"Experts in *{selected_field}*:")

            for i, row in df.head(5).iterrows():
                with st.container():
                    with st.expander(f"**#{i+1} {row['author_name']}**"):
                        tab1, tab4 = st.tabs([ "Publications", "AI Insights"])

                        with tab1:
                                author_pubs = db[db['author_name'] == row['author_name']][['year', 'title', 'type']]

                                
                                    # 按 type 排序（article 在前），再按 year 降序
                                type_order = {"article": 0, "conference_proceedings": 1}
                                author_pubs['type_order'] = author_pubs['type'].map(type_order).fillna(99)
                                author_pubs = author_pubs.sort_values(by=['type_order', 'year'], ascending=[True, False])

                                # 去掉排序辅助列 & 重置索引（隐藏原索引）
                                author_pubs = author_pubs.drop(columns=['type_order']).reset_index(drop=True)

                                # 显示表格
                                st.dataframe(author_pubs, use_container_width=True)

                        

                        with tab4:
                            
                            
                            st.caption("These recommendations are generated by an AI model and are for reference only.")

                            if pd.notna(row['qanswer']):
                                st.markdown(
                                    f"""
                                    <div style="background-color:#f9f9f9;padding:15px;
                                                border-radius:8px;border-left:4px solid #4F86F7;
                                                line-height:1.6;font-size:15px;">
                                        {row['qanswer']}
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                            else:
                                st.info("No AI-generated recommendation available.")



        else:
            st.warning(f"No data available in {csv_file}.")
    else:
        st.error(f"Data file '{csv_file}' not found.")
